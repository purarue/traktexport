#!/usr/bin/env python3

"""
A CLI script to add/remove items from history using the trakt url

this is very unstable, it is super basic right now
"""

# TODO:
# - command to change rating on movie/show
# - watch should ask if you want to set a rating if its a movie
# - allow localizing datetimes for recent

from typing import Optional, NamedTuple, Union, Iterator, Iterable

import click
from logzero import logger  # type: ignore[import]
from traktexport.export import _check_config

_check_config()

USERNAME: Optional[str] = None


@click.group()
@click.option(
    "-u",
    "--username",
    help="Trakt username",
    required=True,
    envvar="TRAKT_USERNAME",
    show_envvar=True,
)
def main(username: str) -> None:
    global USERNAME

    USERNAME = username


class Movie(NamedTuple):
    id: str


class Episode(NamedTuple):
    id: str
    season: int
    episode: int


Input = Union[Movie, Episode]


def _parse_url_to_input(url: str) -> Input:
    from urllib.parse import urlsplit

    parts = urlsplit(url)
    if parts.netloc != "trakt.tv":
        raise ValueError(f"Invalid URL netloc: {parts.netloc}")

    prts = [u for u in parts.path.split("/") if u.strip()]

    match prts:
        case ["movies", id, *_]:
            return Movie(id)
        case ["shows", id, "seasons", season, "episodes", episode, *_]:
            return Episode(id, int(season), int(episode))
        case _:
            raise ValueError(f"Invalid URL parts: {prts}")


def _mark_watched(inp: Input) -> None:
    from trakt.movies import Movie  # type: ignore[import]
    from trakt.tv import TVEpisode  # type: ignore[import]

    if isinstance(inp, Movie):
        mv = Movie(inp.id, year=None, slug=inp.id)
        mv._get()
        resp = mv.mark_as_seen()
        click.echo(resp)
    elif isinstance(inp, Episode):
        ep = TVEpisode(inp.id, inp.season, inp.episode)
        ep._get()
        resp = ep.mark_as_seen()
        click.echo(resp)
    else:
        raise ValueError("Invalid input")


@main.command(short_help="mark movie/episode as watched")
@click.option("--url", help="URL to watch", required=True)
def watch(url: str) -> None:
    """
    Pass the movie/episode url to mark it as watched right now
    """
    assert USERNAME is not None
    inp = _parse_url_to_input(url)
    _mark_watched(inp)
    _print_recent_history(_recent_history_entries(username=USERNAME, limit=10))


from traktexport.dal import _parse_history, HistoryEntry


def _recent_history_entries(
    *, username: str, limit: int = 10, page: int = 1
) -> Iterator[HistoryEntry]:
    from traktexport.export import _trakt_request

    data = _trakt_request(
        f"users/{username}/history?page={page}&limit={limit}", logger=None, sleep_time=0
    )

    yield from _parse_history(data)


def _display_history_entry(entry: HistoryEntry, include_id: bool = False) -> str:
    from traktexport.dal import Movie, Episode

    watched_at = entry.watched_at.strftime("%Y-%m-%d %H:%M:%S")
    s: str
    if isinstance(entry.media_data, Movie):
        s = f"{watched_at} {entry.action} {entry.media_data.title}"
    elif isinstance(entry.media_data, Episode):
        ep = entry.media_data
        assert isinstance(ep, Episode)
        s = f"{watched_at} {ep.show.title} S{ep.season}E{ep.episode} - {ep.title}"
    else:
        raise ValueError(f"Invalid media_type: {entry.media_type}")

    if include_id:
        s += f" ({entry.history_id})"
    return s


def _print_recent_history(
    history: Iterable[HistoryEntry], include_id: bool = False
) -> None:
    history = list(history)  # consume so the request happens
    click.secho("Recent history:\n", bold=True)
    for i, entry in enumerate(history, 1):
        click.echo(f"{i}: {_display_history_entry(entry, include_id=include_id)}")


@main.command(short_help="remove recent watched item")
@click.option("-i/-a", "--interactive/--non-interactive", default=True, is_flag=True)
def unwatch(interactive: bool) -> None:
    """
    Remove the last watched item from your history
    """
    from traktexport.export import _trakt_request

    assert USERNAME is not None
    data = list(_recent_history_entries(username=USERNAME, limit=10))
    picked: HistoryEntry = data[0]
    if interactive:
        _print_recent_history(data, include_id=True)
        picked_int: int = click.prompt(
            "Pick item (number) to remove",
            type=int,
            default=1,
        )
        if picked_int < 1 or picked_int > len(data):
            raise click.ClickException("Invalid choice")

        picked = data[picked_int - 1]

    click.echo(f"Removing {picked}...")

    last_history_id = picked.history_id
    click.confirm(f"Remove {picked}?", abort=True, default=True)

    click.echo(f"Removing {last_history_id}...")

    resp = _trakt_request(
        "sync/history/remove",
        method="post",
        data={"movies": [], "episodes": [], "ids": [last_history_id]},
        logger=logger,
        sleep_time=0,
    )

    click.echo(resp)
    _print_recent_history(
        _recent_history_entries(username=USERNAME, limit=10), include_id=True
    )


@main.command(short_help="show recent history")
def recent() -> None:
    """
    Show recent history
    """
    assert USERNAME is not None
    _print_recent_history(_recent_history_entries(username=USERNAME, limit=10))


if __name__ == "__main__":
    main()
